// © 2024, Worth Systems.

using EventsHandler.Constants;
using EventsHandler.Mapping.Models.POCOs.NotificatieApi;
using EventsHandler.Services.DataQuerying.Composition.Strategy.ObjectTypen.Interfaces;
using EventsHandler.Services.DataQuerying.Composition.Strategy.ObjectTypen.v1;
using EventsHandler.Services.Settings.Configuration;
using EventsHandler.Utilities._TestHelpers;

namespace EventsHandler.UnitTests.Services.DataQuerying.Composition.Strategy.ObjectTypen
{
    [TestFixture]
    public sealed class QueryObjectTypenTests
    {
        private WebApiConfiguration _testConfiguration = null!;

        [OneTimeSetUp]
        public void TestsInitialize()
        {
            this._testConfiguration = ConfigurationHandler.GetValidEnvironmentConfiguration();
        }

        [OneTimeTearDown]
        public void TestsCleanup()
        {
            this._testConfiguration.Dispose();
        }

        #region IsValidType
        [Test]
        public void IsValidType_ForMissingObjectTypeUri_ReturnsFalse()
        {
            // Arrange
            IQueryObjectTypen objectTypen = new QueryObjectTypen(this._testConfiguration);

            // Act
            bool actualResult = objectTypen.IsValidType(default);

            // Assert
            Assert.That(actualResult, Is.False);
        }

        [Test]
        public void IsValidType_ForDefaultObjectTypeUri_ReturnsFalse()
        {
            // Arrange
            IQueryObjectTypen objectTypen = new QueryObjectTypen(this._testConfiguration);

            var notification = new NotificationEvent
            {
                Attributes = new EventAttributes
                {
                    ObjectType = DefaultValues.Models.EmptyUri
                }
            };

            // Act
            bool actualResult = objectTypen.IsValidType(notification);

            // Assert
            Assert.That(actualResult, Is.False);
        }

        [Test]
        public void IsValidType_ForInvalidObjectTypeUri_ReturnsFalse()
        {
            // Arrange
            IQueryObjectTypen objectTypen = new QueryObjectTypen(this._testConfiguration);

            var notification = new NotificationEvent
            {
                Attributes = new EventAttributes
                {
                    ObjectType = new Uri("https://www.google.com/")
                }
            };

            // Act
            bool actualResult = objectTypen.IsValidType(notification);

            // Assert
            Assert.That(actualResult, Is.False);
        }

        [Test]
        public void IsValidType_ForUnmatchingObjectTypeUri_ReturnsFalse()
        {
            // Arrange
            IQueryObjectTypen objectTypen = new QueryObjectTypen(this._testConfiguration);

            var notification = new NotificationEvent
            {
                Attributes = new EventAttributes
                {
                    ObjectType = new Uri("https://objecttypen.test.denhaag.opengem.nl/api/v2/objecttypes/12345678-1234-1234-1234-1234567890ab")
                }
            };

            // Act
            bool actualResult = objectTypen.IsValidType(notification);

            // Assert
            Assert.That(actualResult, Is.False);
        }

        [Test]
        public void IsValidType_ForMatchingObjectTypeUri_ReturnsTrue()
        {
            // Arrange
            IQueryObjectTypen objectTypen = new QueryObjectTypen(this._testConfiguration);

            var notification = new NotificationEvent
            {
                Attributes = new EventAttributes
                {
                    ObjectType = new Uri("https://objecttypen.test.denhaag.opengem.nl/api/v2/objecttypes/0236e468-2ad8-43d6-a723-219cb22acb37")
                }
            };

            // Act
            bool actualResult = objectTypen.IsValidType(notification);

            // Assert
            Assert.That(actualResult, Is.True);
        }
        #endregion
    }
}