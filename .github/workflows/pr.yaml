name: PR Validation

on:
  pull_request:
    branches: ["main"]
    types: [opened, synchronize]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  # Don't want the tests running in parallel
  cancel-in-progress: true

jobs:
  validate-versions:
    runs-on: ubuntu-latest
    steps:
      - uses: szenius/set-timezone@v2.0
        with:
          timezoneLinux: "Europe/Amsterdam"
        name: Set Timezone to Europe/Amsterdam

      - uses: actions/checkout@v4
        name: Checkout repository

      - run: |
          LATEST_RELEASE=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" https://api.github.com/repos/${{ github.repository }}/releases/latest | jq -r '.tag_name' | sed 's/^v\.//')
          echo "version_release=$LATEST_RELEASE" >> $GITHUB_OUTPUT
        name: Get latest release and strip prefix
        id: release

      - run: |
          PROJECT_VERSION=$(grep -oPm1 "(?<=<VersionPrefix>)[^<]+" OMC/Infrastructure/WebApi/EventsHandler/EventsHandler.csproj)
          echo "version_project=$PROJECT_VERSION" >> $GITHUB_OUTPUT
        name: Get project version
        id: project

      - run: |
          set -e

          echo "Latest Github release tag: ${{ steps.release.outputs.version_release }}"
          echo "Project version [EventsHandler.csproj]: ${{ steps.project.outputs.version_project }}"

          compare_versions() {
            local v1=(${1//./ })  # Split LATEST_RELEASE into array
            local v2=(${2//./ })  # Split PROJECT_VERSION into array

            for i in {0..2}; do
              if [[ ${v1[i]:-0} -lt ${v2[i]:-0} ]]; then
                echo "✅  PROJECT_VERSION is higher :: [$1 < $2]"
                return 0
              elif [[ ${v1[i]:-0} -gt ${v2[i]:-0} ]]; then
                echo "⛔  LATEST_RELEASE is higher :: [$1 > $2]"
                echo "⚠️  Double-check that you've pulled/merged the latest version before continuing." | tee -a $GITHUB_STEP_SUMMARY
                echo "⛔  Project version [$2] needs to be higher than latest release [$1], please adjust the version in [OMC/Infrastructure/WebApi/EventsHandler/EventsHandler.csproj]" | tee -a $GITHUB_STEP_SUMMARY
                return 2
              fi
            done
            echo "⚠️  Versions are equal :: [$1 == $2]"
            echo "⛔  Project version [$2] needs to be higher than latest release [$1], please adjust the version in [OMC/Infrastructure/WebApi/EventsHandler/EventsHandler.csproj]" | tee -a $GITHUB_STEP_SUMMARY
            return 1
          }

          compare_versions "${{ steps.release.outputs.version_release }}" "${{ steps.project.outputs.version_project }}"
        name: Check project and latest release versions
        
      - run: |
          echo "Checking if the project version is listed in CHANGELOG.md"

          if ! grep -q "## ${{ steps.project.outputs.version_project }}" CHANGELOG.md; then
            echo "⛔  Version ${{ steps.project.outputs.version_project }} not found in CHANGELOG.md" | tee -a $GITHUB_STEP_SUMMARY
            exit 1
          else
            echo "✅ Version ${{ steps.project.outputs.version_project }} found in CHANGELOG.md"
          fi
        name: Check if project version is in CHANGELOG.md

  app-build-and-test:
    runs-on: ubuntu-latest
    needs: validate-versions
    strategy:
      matrix:
        dotnet-version: ["8.0"]
        test-project:
          [
            "OMC/Tests/Core/Application/Common.UnitTests",
            "OMC/Tests/Core/Domain/ZhvModels.UnitTests",
            "OMC/Tests/Infrastructure/Persistence/WebQueries.Tests.Unit",
            "OMC/Tests/Infrastructure/WebApi/EventsHandler.UnitTests",
            "OMC/Tests/Infrastructure/WebApi/EventsHandler.IntegrationTests",
          ]

    env:
      NUGET_PACKAGES: ${{ github.workspace }}/.nuget/packages

    steps:
      - uses: szenius/set-timezone@v2.0
        with:
          timezoneLinux: "Europe/Amsterdam"
        name: Set Timezone to Europe/Amsterdam

      - uses: actions/checkout@v4
        name: Checkout repository

      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ matrix.dotnet-version }}
          cache: true
          cache-dependency-path: "${{ matrix.test-project }}/packages.lock.json"
        name: Install dotnet [${{ matrix.dotnet-version }}] and setup cache

      - run: dotnet restore --locked-mode --force-evaluate
        name: Install application dependencies (dotnet restore)

      - run: dotnet build --configuration Release --no-restore
        name: Build

      - uses: alsi-lawr/dotnet-test-coverlet@v1
        with:
          project: ${{ matrix.test-project }}
          threshold: 50
          dotnet-version: ${{ matrix.dotnet-version }}
        name: Run unit tests and generate coverage
        id: run-tests

      - uses: irongut/CodeCoverageSummary@v1.3.0
        with:
          filename: ${{ steps.run-tests.outputs.coverage-report-path }}/lcov.cobertura.xml
          format: markdown
          hide_complexity: true
          indicators: true
          output: file
          thresholds: "50 80"
        name: Generate coverage report in markdown

      - run: cat **code-coverage-results.md** >> $GITHUB_STEP_SUMMARY
        name: Write coverage report to job summary

  docker-build-and-push:
    runs-on: ubuntu-latest
    needs: app-build-and-test

    steps:
      - uses: actions/checkout@v4

      - run: |
          TAG=$(grep -oPm1 "(?<=<VersionPrefix>)[^<]+" OMC/Infrastructure/WebApi/EventsHandler/EventsHandler.csproj)-dev${{ github.run_number }}
          echo "TAG=$TAG" >> $GITHUB_ENV
          echo "tag=$TAG" >> $GITHUB_OUTPUT
        name: Set tag
        id: set-tag

      - uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
        name: Login at dockerhub

      - uses: docker/setup-qemu-action@v3
        name: Setup QEMU

      - uses: docker/setup-buildx-action@v3
        name: Setup buildx

      - uses: docker/build-push-action@v6
        with:
          file: OMC/Infrastructure/WebApi/EventsHandler/Dockerfile
          push: true
          tags: worthnl/notifynl-omc:${{ env.TAG }}
        name: Docker build and push ${{ env.TAG }}

    outputs:
      tag: ${{ steps.set-tag.outputs.tag }}

  helm-release:
    runs-on: ubuntu-latest
    needs: docker-build-and-push
    environment: Test

    steps:
      - uses: actions/checkout@v4
        with:
          repository: Worth-NL/helm-charts
          ref: main
          token: ${{ secrets.WORTHNL_PAT }}
        name: Checkout Worth-NL/helm-charts

      - uses: bwvolleyball/k8s-toolkit@v1.0.0
        with:
          config: ${{ secrets.K8S_CONFIG }}

      - run: helm repo add denhaag https://gemeente-denhaag.github.io/helm-charts/
        name: Install helm chart dependency repository

      - run: helm dependency build
        working-directory: ${{ github.workspace }}/notifynl-omc
        name: Helm chart dependency build

      - run: |
          helm version
          helm upgrade --install omc notifynl-omc/ -n notifynl-gzac --reuse-values --set image.tag=${{ needs.docker-build-and-push.outputs.tag }} --wait --timeout 300s
        name: Deploy v1 chart

      - run: |
          helm version
          helm upgrade --install omcv2 notifynl-omc/ -n notifynl-zgw --reuse-values --set image.tag=${{ needs.docker-build-and-push.outputs.tag }} --wait --timeout 300s
        name: Deploy v2 chart
